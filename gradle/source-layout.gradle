sourceCompatibility = '11'

if (name.endsWith(".tests")) {
	sourceSets {
		main {
			java.srcDirs = []
			resources.srcDirs = []
		}
		test {
			java.srcDirs = ['src', 'src-gen']
			resources.srcDirs = ['src', 'src-gen']
			xtendOutputDir = 'xtend-gen'
		}
	}
} else {
	sourceSets {
		main {
			java.srcDirs = ['src', 'src-gen']
			resources.srcDirs = ['src', 'src-gen']
			xtendOutputDir = 'xtend-gen'
		}
		test {
			java.srcDirs = []
			resources.srcDirs = []
		}
	}
}

sourceSets.all {
	resources.exclude '**/*.g', '**/*.mwe2', '**/*.xtend', '**/*._trace'
}

jar {
	from(sourceSets.main.allSource) {
		include '**/*.xtext'
	}
	manifest {
		attributes 'Bundle-SymbolicName': project.name
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
javadoc.options.tags = [ "generated", "ordered", "model" ]
javadoc.options.addStringOption('Xdoclint:none', '-quiet')
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

java {
	withJavadocJar()
	withSourcesJar()
}

// Needed to fix Javadoc search
// See comments below
final JAVADOC_FIX_SEARCH_STR = '\n\n' +
'getURLPrefix = function(ui) {\n' +
'    return \'\';\n' +
'};\n'

tasks.withType(Javadoc) {
    doLast {
        // Append the fix to the file
        def searchScript = new File(destinationDir.getAbsolutePath() + '/search.js')
        searchScript.append JAVADOC_FIX_SEARCH_STR
    }
}